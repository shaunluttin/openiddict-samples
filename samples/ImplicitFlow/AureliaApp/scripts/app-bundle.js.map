{"version":3,"sources":["open-id/client-model.ts","open-id/open-id-configuration.ts","open-id/router-configuration-service.ts","open-id/provider-model.ts","open-id/http-discovery-service.ts","open-id/open-id-response-model.ts","open-id/id-token-model.ts","open-id/access-token-model.ts","open-id/uri-helper.ts","open-id/open-id-response-parser.ts","open-id/token-parser.ts","open-id/storage-service.ts","open-id/user-info-model.ts","open-id/window-service.ts","open-id/implicit-flow-service.ts","open-id/open-id.ts","app.ts","environment.ts","login.ts","main.ts","open-id/index.ts","C:/Users/bigfo/GitHub/_forks/openiddict-samples/samples/ImplicitFlow/AureliaApp/node_modules/jwt-decode/lib/base64_url_decode.js","C:/Users/bigfo/GitHub/_forks/openiddict-samples/samples/ImplicitFlow/AureliaApp/node_modules/jwt-decode/lib/atob.js","C:/Users/bigfo/GitHub/_forks/openiddict-samples/samples/ImplicitFlow/AureliaApp/src/app.html","C:/Users/bigfo/GitHub/_forks/openiddict-samples/samples/ImplicitFlow/AureliaApp/src/login.html","C:/Users/bigfo/GitHub/_forks/openiddict-samples/samples/ImplicitFlow/AureliaApp/node_modules/jwt-decode/lib/index.js"],"names":[],"mappings":"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","file":"app-bundle.js","sourcesContent":["export class ClientModel {\r\n    public Scheme: string = \"http://\";\r\n    public ClientAuthority: string = \"localhost:9000\";\r\n    public ClientId: string = \"myClient\";\r\n    public ResponseType: string = \"id_token token\";\r\n    public RedirectPath: string = \"/signin-oidc\";\r\n    public PostLogoutRedirectPath: string = \"/signout-oidc\";\r\n    public Scopes: string = \"openid email profile\";\r\n    public Nonce: string = \"this_is_not_a_real_nonce\"; // TODO Determine the nonce purpose and fulfill that purpose. \r\n    public State: string = \"this_is_not_a_real_state\"; // TODO Validate the state to prevent XSRF attacks.\r\n\r\n    public get RedirectUri(): string {\r\n        return this.Scheme\r\n            + this.ClientAuthority\r\n            + this.RedirectPath;\r\n    }\r\n\r\n    public get PostLogoutRedirectUri(): string {\r\n        return this.Scheme\r\n            + this.ClientAuthority\r\n            + this.PostLogoutRedirectPath;\r\n    }\r\n}\r\n","export class OpenIdConfiguration {\r\n    // TODO Add other properties\r\n    // TOOD that we want to let the client application choose.\r\n    public LoginRedirectModuleId = \"login\";\r\n    public LogoutRedirectModuleId = \"logout\";\r\n}","import { autoinject } from \"aurelia-framework\";\r\nimport { ClientModel } from \"./client-model\";\r\nimport { OpenIdConfiguration } from \"./open-id-configuration\";\r\nimport { RouterConfiguration, RouteConfig, NavigationInstruction } from \"aurelia-router\";\r\n\r\n@autoinject\r\nexport class RouterConfigurationService {\r\n\r\n    private loginRedirectHandler: Function;\r\n    private logoutRedirectHandler: Function;\r\n\r\n    constructor(private clientModel: ClientModel) { }\r\n\r\n    public ConfigureRouter(\r\n        routerConfiguration: RouterConfiguration,\r\n        openIdConfiguration: OpenIdConfiguration,\r\n        loginRedirectHandler: Function,\r\n        logoutRedirectHandler: Function) {\r\n\r\n        this.loginRedirectHandler = loginRedirectHandler;\r\n        this.logoutRedirectHandler = logoutRedirectHandler;\r\n\r\n        let loginRedirectRoute: RouteConfig = {\r\n            name: \"openIdRedirectRoute\",\r\n            navigationStrategy: (instruction: NavigationInstruction) => {\r\n                this.loginRedirectHandler();\r\n                instruction.config.moduleId = openIdConfiguration.LoginRedirectModuleId;\r\n            },\r\n            route: this.clientModel.RedirectPath,\r\n        };\r\n\r\n        let logoutRedirectRoute: RouteConfig = {\r\n            name: \"openIdPostLogoutRedirectRoute\",\r\n            navigationStrategy: (instruction: NavigationInstruction) => {\r\n                this.logoutRedirectHandler();\r\n                instruction.config.moduleId = openIdConfiguration.LogoutRedirectModuleId;\r\n            },\r\n            route: this.clientModel.PostLogoutRedirectPath,\r\n        };\r\n\r\n        routerConfiguration.mapRoute(loginRedirectRoute);\r\n        routerConfiguration.mapRoute(logoutRedirectRoute);\r\n    }\r\n}\r\n","export class ProviderModel {\r\n    public Scheme = \"http://\";\r\n    public OpenIdAuthority: string = \"localhost:12345\";\r\n    public OpenIdConfigInfoPath: string = \"/.well-known/openid-configuration\";\r\n    public AuthorizationEndpoint: string;\r\n    public EndSessionEndpoint: string;\r\n    public GrantTypesSupported: string[];\r\n    public IdTokenSigningAlgValuesSupported: string[];\r\n    public Issuer: string;\r\n    public JwksUri: string;\r\n    public ResponseModesSupported: string[];\r\n    public ResponseTypesSupported: string[];\r\n    public ScopesSupported: string[];\r\n    public SubjectTypesSupported: string[];\r\n    public TokenEndpoint: string;\r\n    public UserInfoEndpoint: string;\r\n\r\n    public get ConfigurationInformationUri(): string {\r\n        return this.Scheme\r\n            + this.OpenIdAuthority\r\n            + this.OpenIdConfigInfoPath;\r\n    }\r\n}","import { HttpClient } from \"aurelia-fetch-client\";\r\nimport { autoinject } from \"aurelia-framework\";\r\nimport { ClientModel } from \"./client-model\";\r\nimport { ProviderModel } from \"./provider-model\";\r\n\r\n@autoinject\r\nexport class HttpDiscoveryService {\r\n\r\n    public get Provider(): ProviderModel {\r\n        return this.providerModel;\r\n    }\r\n\r\n    public get Client(): ClientModel {\r\n        return this.clientModel;\r\n    }\r\n\r\n    constructor(\r\n        private httpClient: HttpClient,\r\n        private providerModel: ProviderModel,\r\n        private clientModel: ClientModel) { }\r\n\r\n    public get ConfigurationInformationUri(): string {\r\n        return this.providerModel.Scheme\r\n            + this.providerModel.OpenIdAuthority\r\n            + this.providerModel.OpenIdConfigInfoPath;\r\n    }\r\n\r\n    // See http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfig\r\n    public ObtainOpenIdProviderConfigurationInformation(): Promise<string> {\r\n\r\n        return this.httpClient.fetch(this.ConfigurationInformationUri)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                this.providerModel.Issuer = data.issuer;\r\n                this.providerModel.AuthorizationEndpoint = data.authorization_endpoint;\r\n                this.providerModel.JwksUri = data.jwks_uri;\r\n                this.providerModel.EndSessionEndpoint = data.end_session_endpoint;\r\n                this.providerModel.UserInfoEndpoint = data.userinfo_endpoint;\r\n                // TODO Set the following string array properties.\r\n                // code_challenge_methods_supported\r\n                // grant_types_supported\r\n                // response_modes_supported\r\n                // response_types_supported\r\n                // subject_types_supported\r\n                // scopes_supported\r\n                // id_token_signing_alg_values_supported\r\n                return \"The provider is ready for use.\";\r\n            });\r\n    }\r\n\r\n    public CreateAuthenticationRequestUri(): Promise<string> {\r\n\r\n        // TODO Make this lazy and cache the result. \r\n\r\n        return this.ObtainOpenIdProviderConfigurationInformation()\r\n            .then(() => this.providerModel.AuthorizationEndpoint\r\n                + `?client_id=${this.clientModel.ClientId}`\r\n                + `&response_type=${this.clientModel.ResponseType}`\r\n                + `&redirect_uri=${this.clientModel.RedirectUri}`\r\n                + `&scope=${this.clientModel.Scopes}`\r\n                + `&nonce=${this.clientModel.Nonce}`\r\n                + `&state=${this.clientModel.State}`);\r\n    }\r\n\r\n    public CreateLogoutUri(): Promise<string> {\r\n\r\n        // TODO Make this lazy and cache the result. \r\n\r\n        return this.ObtainOpenIdProviderConfigurationInformation()\r\n            .then(() => this.providerModel.EndSessionEndpoint\r\n                + `?post_logout_redirect_uri=${this.clientModel.PostLogoutRedirectUri}`);\r\n    }\r\n}\r\n","export class OpenIdResponseModel {\r\n    public AccessToken: string;\r\n    public TokenType: string;\r\n    public IdToken: string;\r\n    public ExpiresIn: string;\r\n    public State: string;\r\n}\r\n","export class IdTokenModel {\r\n    public AtHash: string;\r\n    public Aud: string;\r\n    public Azp: string;\r\n    public Email: string;\r\n    public Exp: number;\r\n    public Iat: number;\r\n    public Iss: string;\r\n    public Jti: string;\r\n    public Nbf: number;\r\n    public Nonce: string;\r\n    public RawJwt: string;\r\n    public Sub: string;\r\n    public UniqueName: string;\r\n    public Usuage: string;\r\n}\r\n\r\n","export class AccessTokenModel {\r\n    public Aud: string;\r\n    public Iss: string;\r\n    public Nbf: string;\r\n    public Exp: string;\r\n    public Sub: string;\r\n    public RawJwt: string;\r\n}","export class UriHelper {\r\n    public static GetParameterByName(name: string, url: string): string {\r\n        name = name.replace(/[\\[\\]]/g, \"\\\\$&\");\r\n        let regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\");\r\n        let results = regex.exec(url);\r\n\r\n        if (!results) {\r\n            return null;\r\n        }\r\n\r\n        if (!results[2]) {\r\n            return \"\";\r\n        }\r\n\r\n        return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\r\n    }\r\n}\r\n","import { UriHelper } from \"./uri-helper\";\r\nimport { OpenIdResponseModel } from \"./open-id-response-model\";\r\n\r\nexport class OpenIdResponseParser {\r\n    public ParseWindowLocation(location: Location): OpenIdResponseModel {\r\n        let hash = location.hash;\r\n\r\n        // turn the hash into a query string\r\n        // because that is what GetParameterByName expects.\r\n        let queryString = \"&\" + hash.substr(1);\r\n\r\n        let response: OpenIdResponseModel =\r\n            {\r\n                AccessToken: UriHelper.GetParameterByName(\"access_token\", queryString),\r\n                ExpiresIn: UriHelper.GetParameterByName(\"expires_in\", queryString),\r\n                IdToken: UriHelper.GetParameterByName(\"id_token\", queryString),\r\n                State: UriHelper.GetParameterByName(\"state\", queryString),\r\n                TokenType: UriHelper.GetParameterByName(\"token_type\", queryString),\r\n            };\r\n\r\n        return response;\r\n    }\r\n}\r\n","import { IdTokenModel } from \"./id-token-model\";\r\nimport { AccessTokenModel } from \"./access-token-model\";\r\nimport { OpenIdResponseModel } from \"./open-id-response-model\";\r\nimport { ProviderModel } from \"./provider-model\";\r\nimport * as jwt_decode from \"jwt-decode\";\r\n\r\nexport class TokenParser {\r\n\r\n    public DecodeIdToken(openIdResponse: OpenIdResponseModel): IdTokenModel {\r\n\r\n        let obj = jwt_decode(openIdResponse.IdToken);\r\n        let decoded: IdTokenModel = {\r\n            AtHash: obj.at_hash,\r\n            Aud: obj.aud,\r\n            Azp: obj.azp,\r\n            Email: obj.email,\r\n            Exp: obj.exp,\r\n            Iat: obj.iat,\r\n            Iss: obj.iss,\r\n            Jti: obj.jti,\r\n            Nbf: obj.nbf,\r\n            Nonce: obj.nonce,\r\n            RawJwt: openIdResponse.IdToken,\r\n            Sub: obj.sub,\r\n            UniqueName: obj.unique_name,\r\n            Usuage: obj.usage,\r\n        };\r\n\r\n        return decoded;\r\n    }\r\n\r\n    // http://openid.net/specs/openid-connect-core-1_0.html#IDTokenValidation\r\n    public ValidateIdToken(idToken: IdTokenModel, providerModel: ProviderModel): boolean {\r\n        // 1 - Not applicable, because the token is not encrypted.\r\n\r\n        // 2\r\n        if (idToken.Iss !== providerModel.Issuer) {\r\n            return false;\r\n        }\r\n\r\n        // 3 TODO\r\n        // 4 TODO\r\n        // 5 TODO\r\n        // 6 TODO\r\n        // 7 TODO\r\n        // 8 TODO\r\n        // 9 TODO\r\n        // 10 TODO\r\n        // 11 TODO\r\n        // 12 TODO\r\n        // 13 TODO\r\n\r\n        return true;\r\n    }\r\n\r\n    public DecodeAccessToken(openIdResponse: OpenIdResponseModel): AccessTokenModel {\r\n\r\n        let obj = jwt_decode(openIdResponse.AccessToken);\r\n        let decoded: AccessTokenModel = {\r\n            Aud: obj.aud,\r\n            Exp: obj.exp,\r\n            Iss: obj.iss,\r\n            Nbf: obj.nbf,\r\n            RawJwt: openIdResponse.AccessToken,\r\n            Sub: obj.sub,\r\n        };\r\n\r\n        return decoded;\r\n    }\r\n}\r\n","import { AccessTokenModel } from \"./access-token-model\";\r\nimport { IdTokenModel } from \"./id-token-model\";\r\n\r\nexport class StorageService {\r\n\r\n    private accessTokenKey: string = \"access_token\";\r\n    private idTokenKey: string = \"id_token\";\r\n\r\n    public get AccessTokenKey() {\r\n        return this.accessTokenKey;\r\n    }\r\n\r\n    public get IdTokenKey() {\r\n        return this.idTokenKey;\r\n    }\r\n\r\n    public SetAccessToken(accessToken: AccessTokenModel) {\r\n        localStorage.setItem(this.accessTokenKey, accessToken.RawJwt);\r\n    }\r\n\r\n    public GetAccessToken(): string {\r\n        return localStorage.getItem(this.accessTokenKey);\r\n    }\r\n\r\n    public SetIdToken(idToken: IdTokenModel) {\r\n        localStorage.setItem(this.idTokenKey, idToken.RawJwt);\r\n    }\r\n\r\n    public GetIdToken(): string {\r\n        return localStorage.getItem(this.idTokenKey);\r\n    }\r\n\r\n    public ClearStorageServiceItems() {\r\n        localStorage.removeItem(this.AccessTokenKey);\r\n        localStorage.removeItem(this.IdTokenKey);\r\n    }\r\n}\r\n","import { IdTokenModel } from \"./id-token-model\";\r\nimport { AccessTokenModel } from \"./access-token-model\";\r\n\r\nexport class UserInfoModel {\r\n\r\n    public IdToken: IdTokenModel;\r\n\r\n    public AccessToken: AccessTokenModel;\r\n\r\n    public get Email(): string {\r\n        return this.IdToken.Email;\r\n    }\r\n}\r\n","export class WindowService {\r\n\r\n    private window: Window;\r\n\r\n    constructor() {\r\n        this.window = window;\r\n    }\r\n\r\n    public GetHref(): string {\r\n        return this.window.location.href;\r\n    }\r\n\r\n    public SetHref(value: string) {\r\n        this.window.location.href = value;\r\n    }\r\n\r\n    public GetLocation(): Location {\r\n        return this.window.location;\r\n    }\r\n}","import { autoinject } from \"aurelia-framework\";\r\nimport { OpenIdResponseModel } from \"./open-id-response-model\";\r\nimport { HttpDiscoveryService } from \"./http-discovery-service\";\r\nimport { IdTokenModel } from \"./id-token-model\";\r\nimport { AccessTokenModel } from \"./access-token-model\";\r\nimport { OpenIdResponseParser } from \"./open-id-response-parser\";\r\nimport { TokenParser } from \"./token-parser\";\r\nimport { StorageService } from \"./storage-service\";\r\nimport { ProviderModel } from \"./provider-model\";\r\nimport { UserInfoModel } from \"./user-info-model\";\r\nimport { WindowService } from \"./window-service\";\r\n\r\n@autoinject\r\nexport class ImplicitFlowService {\r\n\r\n    constructor(\r\n        private httpDiscoveryService: HttpDiscoveryService,\r\n        private openIdResponseParser: OpenIdResponseParser,\r\n        private tokenParser: TokenParser,\r\n        private storageService: StorageService,\r\n        private providerModel: ProviderModel,\r\n        private windowService: WindowService) { }\r\n\r\n    // Implicit Flow Step #1\r\n    // Client prepares an Authentication Request containing the desired request parameters.\r\n    public PrepareAuthenticationRequest(): Promise<string> {\r\n        return this.httpDiscoveryService.CreateAuthenticationRequestUri();\r\n    }\r\n\r\n    // Implicit Flow Step #2\r\n    // Client sends the request to the Authorization Server. \r\n    public SendRequestToAuthorizationServer(authenticationRequest: string) {\r\n        this.windowService.SetHref(authenticationRequest);\r\n    }\r\n\r\n    // Implicit Flow Step #6\r\n    // Client validates the ID token and retrieves the End-User's Subject Identifier.  \r\n    public ValidateIdTokenAndRetrieveSubjectIdentifier(): UserInfoModel {\r\n\r\n        let location: Location = this.windowService.GetLocation();\r\n        let openIdResponse: OpenIdResponseModel = this.openIdResponseParser.ParseWindowLocation(location);\r\n\r\n        let accessToken: AccessTokenModel = this.tokenParser.DecodeAccessToken(openIdResponse);\r\n        let idToken: IdTokenModel = this.tokenParser.DecodeIdToken(openIdResponse);\r\n\r\n        let isValid: boolean = this.tokenParser.ValidateIdToken(idToken, this.providerModel);\r\n        if (!isValid) {\r\n            throw new Error(\"The id_token was invalid.\");\r\n        }\r\n\r\n        let userInfo = new UserInfoModel();\r\n        userInfo.IdToken = idToken;\r\n        userInfo.AccessToken = accessToken;\r\n        return userInfo;\r\n    }\r\n}\r\n","import { Aurelia, autoinject } from \"aurelia-framework\";\r\nimport { RouterConfigurationService } from \"./router-configuration-service\";\r\nimport { RouterConfiguration } from \"aurelia-router\";\r\nimport { HttpDiscoveryService } from \"./http-discovery-service\";\r\nimport { ImplicitFlowService } from \"./implicit-flow-service\";\r\nimport { StorageService } from \"./storage-service\";\r\nimport { UserInfoModel } from \"./user-info-model\";\r\nimport { OpenIdConfiguration } from \"./open-id-configuration\";\r\nimport { WindowService } from \"./window-service\";\r\n\r\nfunction configure(aurelia: Aurelia, callback) {\r\n    callback();\r\n}\r\n\r\n@autoinject\r\nclass OpenId {\r\n\r\n    public get User(): UserInfoModel {\r\n        return this.user;\r\n    }\r\n\r\n    private user: UserInfoModel;\r\n\r\n    constructor(\r\n        private httpDiscoveryService: HttpDiscoveryService,\r\n        private implicitFlowService: ImplicitFlowService,\r\n        private routerConfigurationService: RouterConfigurationService,\r\n        private storageService: StorageService,\r\n        private windowService: WindowService) { }\r\n\r\n    public Configure(routerConfiguration: RouterConfiguration, openIdConfiguration: OpenIdConfiguration) {\r\n\r\n        // TODO throw if routerConfiguration is null\r\n        // TODO throw is openIdConfiguration is null (maybe - do we have defaults?)\r\n        this.routerConfigurationService.ConfigureRouter(\r\n            routerConfiguration,\r\n            openIdConfiguration,\r\n            this.LoginRedirectHandler,\r\n            this.PostLogoutRedirectHandler);\r\n    }\r\n\r\n    public Login() {\r\n        let prepareAuthRequest = this.implicitFlowService.PrepareAuthenticationRequest();\r\n        prepareAuthRequest.then((authRequest) => {\r\n            this.implicitFlowService.SendRequestToAuthorizationServer(authRequest);\r\n        });\r\n    }\r\n\r\n    public Logout() {\r\n        let createLogoutUri = this.httpDiscoveryService.CreateLogoutUri();\r\n        createLogoutUri.then((logoutUri) => {\r\n            this.windowService.SetHref(logoutUri);\r\n        });\r\n    }\r\n\r\n    // TODO Consider moving this into the UserInfo class.\r\n    public IsLoggedIn() {\r\n        return this.storageService.GetAccessToken() !== null;\r\n    }\r\n\r\n    // NOTE: This is public only to facilitate unit testing.\r\n    public LoginRedirectHandler() {\r\n        this.user = this.implicitFlowService.ValidateIdTokenAndRetrieveSubjectIdentifier();\r\n        this.storageService.SetAccessToken(this.user.AccessToken);\r\n        this.storageService.SetIdToken(this.user.IdToken);\r\n    }\r\n\r\n    // NOTE: This is public only to facilitate unit testing.\r\n    public PostLogoutRedirectHandler() {\r\n        this.storageService.ClearStorageServiceItems();\r\n    }\r\n}\r\n\r\nexport {\r\n    configure,\r\n    OpenId,\r\n    OpenIdConfiguration,\r\n}\r\n","import { autoinject } from \"aurelia-framework\";\r\nimport { RouterConfiguration, Router } from \"aurelia-router\";\r\nimport { OpenId, OpenIdConfiguration } from \"./open-id/open-id\";\r\n\r\n@autoinject\r\nexport class App {\r\n\r\n    public openId: OpenId;\r\n\r\n    constructor(openId: OpenId) {\r\n        this.openId = openId;\r\n    }\r\n\r\n    public configureRouter(routerConfiguration: RouterConfiguration, router: Router) {\r\n\r\n        // switch from hash (#) to slash (/) navigation\r\n        routerConfiguration.options.pushState = true;\r\n\r\n        // configure routes\r\n        routerConfiguration.map([\r\n            { moduleId: \"login\", route: [\"\", \"login\"] },\r\n        ]);\r\n\r\n        // configure open id\r\n        let openIdConfiguration: OpenIdConfiguration = {\r\n            LoginRedirectModuleId: \"login\",\r\n            LogoutRedirectModuleId: \"login\",\r\n        };\r\n\r\n        this.openId.Configure(routerConfiguration, openIdConfiguration);\r\n    }\r\n}\r\n","export default {\r\n  debug: true,\r\n  testing: true\r\n};\r\n","import { autoinject } from \"aurelia-framework\";\r\nimport { OpenId } from \"./open-id/open-id\";\r\n\r\n@autoinject\r\nexport class Login {\r\n\r\n    private message: string;\r\n    private isLoggedIn: boolean = false;\r\n\r\n    constructor(private openId: OpenId) {\r\n        this.isLoggedIn = this.openId.IsLoggedIn();\r\n        if (this.isLoggedIn) {\r\n            this.message = this.openId.User.Email;\r\n        }\r\n    }\r\n\r\n    private login() {\r\n        this.openId.Login();\r\n    }\r\n\r\n    private logout() {\r\n        this.openId.Logout();\r\n    }\r\n}\r\n","import { Aurelia } from \"aurelia-framework\";\r\nimport environment from \"./environment\";\r\n\r\n// Configure Bluebird Promises.\r\n// Note: You may want to use environment-specific configuration.\r\n(<any> Promise).config({\r\n  warnings: {\r\n    wForgottenReturn: false,\r\n  },\r\n});\r\n\r\nexport function configure(aurelia: Aurelia) {\r\n  aurelia.use\r\n    .standardConfiguration()\r\n    .plugin(\"./open-id/open-id\", config => {\r\n      console.log(\"open-id plugin callback\");\r\n    });\r\n\r\n  if (environment.debug) {\r\n    aurelia.use.developmentLogging();\r\n  }\r\n\r\n  if (environment.testing) {\r\n    aurelia.use.plugin(\"aurelia-testing\");\r\n  }\r\n\r\n  aurelia.start().then(() => aurelia.setRoot());\r\n}\r\n","export { OpenId, OpenIdConfiguration } from \"./open-id\";\r\n",null,null,null,null,null],"sourceRoot":"..\\src"}